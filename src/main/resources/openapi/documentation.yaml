openapi: "3.0.3"
info:
  title: "Backend sklepu internetowego"
  description: "API, które pozwala na składanie zamówień, pobieranie informacji o nich i zarządzanie klientami"
  version: "0.0.1"
servers:
  - url: "http://127.0.0.1:9090"
tags:
  - name: customer
    description: Zbiór danych o klientach sklepu
  - name: order
    description: Zbiór danych o zamówieniu
paths:
  /customer:
    post:
      tags:
        - customer
      description: "Tworzy nowego klienta"
      requestBody:
        description: "Obiekt JSON zawierający informację o kliencie"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: "Created"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Klient został dodany pomyślnie"
  /customer/{id}:
    get:
      tags:
        - customer
      description: "Zwraca klienta na podstawie podanego ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Customer"
  /customer/{id?}:
    delete:
      tags:
        - customer
      description: "Usuwa klienta z bazy"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Customer"
  /order:
    get:
      tags:
        - order
      description: "Zwraca listę zamówień"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
  /order/{id}:
    get:
      tags:
        - order
      description: "Zwraca zamówienie na podstawie podanego ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
  /order/{id}/total:
    get:
      tags:
        - order
      description: "Zwraca łączną wartość zamówienia"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'text/plain':
              schema:
                type: "number"
                format: "double"
  /order/{id}/status:
    put:
      tags:
        - order
      description: "Aktualizuje status zamówienia"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Status zamówienia"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderStatus"
      responses:
        "200":
          description: "OK"
  /order/new:
    post:
      tags:
        - order
      description: "Tworzy nowe zamówienie"
      requestBody:
        description: "Obiekt JSON zawierający informację o zamówieniu"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderItem"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
components:
  schemas:
    Customer:
      type: "object"
      required:
        - id
        - firstName
        - lastName
        - email
      properties:
        id:
          type: "integer"
          format: "int32"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        deliveryAddress:
          type: "object"
          $ref: "#/components/schemas/DeliveryAddress"
    Order:
      type: "object"
      required:
        - number
        - contents
        - status
      properties:
        number:
          type: "string"
        contents:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderItem"
        status:
          type: "string"
          $ref: "#/components/schemas/OrderStatus"
    OrderItem:
      type: "object"
      required:
        - item
        - amount
        - price
      properties:
        item:
          type: "string"
        amount:
          type: "integer"
          format: "int32"
        price:
          type: "number"
          format: "double"
    OrderStatus:
      type: "string"
      enum:
        - "NEW"
        - "PREPARATION"
        - "CANCELLED"
        - "DELIVERY"
        - "DELIVERED"
    DeliveryAddress:
      properties:
        city:
          type: "string"
        street:
          type: "string"
        streetNo:
          type: "string"
        postalCode:
          type: "string"
        phoneNumber:
          type: "string"
